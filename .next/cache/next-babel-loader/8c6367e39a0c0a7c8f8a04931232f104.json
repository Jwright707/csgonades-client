{"ast":null,"code":"import { createStore, combineReducers } from \"redux\";\nimport { persistStore } from \"redux-persist\";\nimport { AuthReducer } from \"./AuthStore/AuthReducer\";\nconst rootReducer = combineReducers({\n  auth: AuthReducer\n});\nexport const initReduxStore = initialState => {\n  let store;\n  const isClient = false;\n\n  if (isClient) {\n    const {\n      persistReducer\n    } = require(\"redux-persist\");\n\n    const storage = require(\"redux-persist/lib/storage\").default; // Mark some reducer as persisted on client\n\n\n    const rootReducerClient = combineReducers({\n      auth: persistReducer({\n        key: \"auth\",\n        storage\n      }, AuthReducer)\n    });\n    store = createStore(rootReducerClient, initialState);\n    store.__PERSISTOR = persistStore(store);\n  } else {\n    store = createStore(rootReducer, initialState);\n  }\n\n  return store;\n};","map":{"version":3,"sources":["/Users/mellet/Development/CsGoNades/csgonades-client/src/store/index.ts"],"names":["createStore","combineReducers","persistStore","AuthReducer","rootReducer","auth","initReduxStore","initialState","store","isClient","persistReducer","require","storage","default","rootReducerClient","key","__PERSISTOR"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,WAAT,QAA4B,yBAA5B;AAEA,MAAMC,WAAW,GAAGH,eAAe,CAAC;AAClCI,EAAAA,IAAI,EAAEF;AAD4B,CAAD,CAAnC;AAMA,OAAO,MAAMG,cAAc,GAAIC,YAAD,IAA4B;AACxD,MAAIC,KAAJ;AACA,QAAMC,QAAQ,QAAd;;AAEA,MAAIA,QAAJ,EAAc;AACZ,UAAM;AAAEC,MAAAA;AAAF,QAAqBC,OAAO,CAAC,eAAD,CAAlC;;AAEA,UAAMC,OAAO,GAAGD,OAAO,CAAC,2BAAD,CAAP,CAAqCE,OAArD,CAHY,CAKZ;;;AACA,UAAMC,iBAAiB,GAAGb,eAAe,CAAC;AACxCI,MAAAA,IAAI,EAAEK,cAAc,CAAC;AAAEK,QAAAA,GAAG,EAAE,MAAP;AAAeH,QAAAA;AAAf,OAAD,EAA2BT,WAA3B;AADoB,KAAD,CAAzC;AAIAK,IAAAA,KAAK,GAAGR,WAAW,CAACc,iBAAD,EAAoBP,YAApB,CAAnB;AACAC,IAAAA,KAAK,CAACQ,WAAN,GAAoBd,YAAY,CAACM,KAAD,CAAhC;AACD,GAZD,MAYO;AACLA,IAAAA,KAAK,GAAGR,WAAW,CAACI,WAAD,EAAcG,YAAd,CAAnB;AACD;;AACD,SAAOC,KAAP;AACD,CApBM","sourcesContent":["import { createStore, combineReducers } from \"redux\";\nimport { persistStore } from \"redux-persist\";\nimport { AuthReducer } from \"./AuthStore/AuthReducer\";\n\nconst rootReducer = combineReducers({\n  auth: AuthReducer\n});\n\nexport type AppState = ReturnType<typeof rootReducer>;\n\nexport const initReduxStore = (initialState: AppState) => {\n  let store;\n  const isClient = typeof window !== \"undefined\";\n\n  if (isClient) {\n    const { persistReducer } = require(\"redux-persist\");\n\n    const storage = require(\"redux-persist/lib/storage\").default;\n\n    // Mark some reducer as persisted on client\n    const rootReducerClient = combineReducers({\n      auth: persistReducer({ key: \"auth\", storage }, AuthReducer)\n    });\n\n    store = createStore(rootReducerClient, initialState);\n    store.__PERSISTOR = persistStore(store);\n  } else {\n    store = createStore(rootReducer, initialState);\n  }\n  return store;\n};\n"]},"metadata":{},"sourceType":"module"}