{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nconst initialState = {\n  user: null\n};\nexport const AuthReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"@@auth/SET_TOKEN\":\n      console.log(\"Setting token\");\n      return _objectSpread({}, state, {\n        authToken: action.payload\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/mellet/Development/CsGoNades/csgonades-client/src/store/AuthStore/AuthReducer.ts"],"names":["initialState","user","AuthReducer","state","action","type","console","log","authToken","payload"],"mappings":";;;;;;;;;;;;AAQA,MAAMA,YAAuB,GAAG;AAC9BC,EAAAA,IAAI,EAAE;AADwB,CAAhC;AAIA,OAAO,MAAMC,WAA4C,GAAG,CAC1DC,KAAK,GAAGH,YADkD,EAE1DI,MAF0D,KAGvD;AACH,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,kBAAL;AACEC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,+BACKJ,KADL;AAEEK,QAAAA,SAAS,EAAEJ,MAAM,CAACK;AAFpB;;AAIF;AACE,aAAON,KAAP;AARJ;AAUD,CAdM","sourcesContent":["import { Reducer } from \"redux\";\nimport { AuthActions } from \"./AuthActions\";\n\nexport type AuthState = {\n  user: null;\n  token?: string;\n};\n\nconst initialState: AuthState = {\n  user: null\n};\n\nexport const AuthReducer: Reducer<AuthState, AuthActions> = (\n  state = initialState,\n  action\n) => {\n  switch (action.type) {\n    case \"@@auth/SET_TOKEN\":\n      console.log(\"Setting token\");\n      return {\n        ...state,\n        authToken: action.payload\n      };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}